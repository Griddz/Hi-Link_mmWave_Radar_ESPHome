esphome:
  name: esp32-test
external_components:
  - source:
      type: git
      url: https://github.com/ssieb/custom_components
    components: [ serial ]
esp32:
  board: esp32dev
  framework:
    type: arduino
globals:
  - id: LD1125H_Occ_Time
    type: int
    restore_value: no
    initial_value: '5' #Set LD1125H Clear Time Here
  - id: LD1125H_Last_Time
    type: time_t
    restore_value: no
    initial_value: time(NULL)
logger:
  level: DEBUG
  baud_rate: 0
api:
ota:
  password: "1c2b59f17342fcc0bfc95c597a85efc8"
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
uart:
  id: LD1125H_UART_BUS
  rx_pin: GPIO3
  tx_pin: GPIO1
  baud_rate: 115200
  stop_bits: 1
  #setup_priority: -100
light:
  - platform: status_led
    name: "ESP32-TEST LED"
    pin: GPIO2
web_server:
  port: 80
interval:
  - interval: 1s
    then:
      lambda: |-
        if ((time(NULL)-id(LD1125H_Last_Time))>id(LD1125H_Occ_Time)) {
          id(LD1125H_Occupancy).publish_state("Clear");
        }
sensor:
  - platform: wifi_signal
    name: "ESP32-TEST WiFi Signal Sensor"
    update_interval: 60s
  - platform: template
    name: "LD1125H Distance"
    id: LD1125H_Distance
    unit_of_measurement: "m"
    accuracy_decimals: 2
    update_interval: 0.1s
#    filters:
#    - sliding_window_moving_average:
#        window_size: 5
#        send_every: 1
text_sensor:
  - platform: wifi_info
    ip_address:
      name: ESP32-TEST IP
  - platform: serial
    uart_id: LD1125H_UART_BUS
    name: LD1125H UART Text
    id: LD1125H_UART_Text
    on_value:
      lambda: |-
        if (id(LD1125H_UART_Text).state.substr(0,3) == "occ") {
          id(LD1125H_Distance).publish_state(atof(id(LD1125H_UART_Text).state.substr(9).c_str()));
          id(LD1125H_Occupancy).publish_state("Occupancy");
          id(LD1125H_Last_Time) = time(NULL);
        }
        else if (id(LD1125H_UART_Text).state.substr(0,3) == "mov") {
          id(LD1125H_Distance).publish_state(atof(id(LD1125H_UART_Text).state.substr(9).c_str()));
          id(LD1125H_Occupancy).publish_state("Movement");
          id(LD1125H_Last_Time) = time(NULL);
        }
        else {
          id(LD1125H_Occupancy).publish_state("UART Receive Error");
        }
  - platform: template
    name: "LD1125H Occupancy Status"
    id: LD1125H_Occupancy
    update_interval: 1s
