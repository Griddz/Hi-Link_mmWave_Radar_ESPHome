esphome:
  name: $devicename
  on_boot:    #LD1115H Initial Setting
    priority: 0
    then:
      - uart.write:
          id: LD1115H_UART_BUS
          data: !lambda |-
            std::string th1stin = "th1=" + to_string(id(LD1115H_TH1).state) +" \n";
            return std::vector<uint8_t>(th1stin.begin(), th1stin.end());
      - uart.write:
          id: LD1115H_UART_BUS
          data: !lambda |-
            std::string th2stin = "th2=" + to_string(id(LD1115H_TH2).state) +" \n";
            return std::vector<uint8_t>(th2stin.begin(), th2stin.end());
external_components:
  - source:
      type: git
      url: https://github.com/ssieb/custom_components #Thanks for @ssieb components.
    components: [ serial ]
globals:
  - id: LD1115H_Occ_Time
    type: int
    restore_value: no
    initial_value: '5' #Set LD1115H Clear Time Here
  - id: LD1115H_Last_Time
    type: time_t
    restore_value: no
    initial_value: time(NULL)
  - id: LD1115H_Clearence_Status
    type: bool
    restore_value: no
    initial_value: "false"
interval:
  - interval: 1s #Clearance Scan Time
    setup_priority: -200
    then:
      lambda: |-
        if ((time(NULL)-id(LD1115H_Last_Time))>id(LD1115H_Occ_Time)) {
          if (id(LD1115H_Clearence_Status) == false) {
            id(LD1115H_Occupancy).publish_state("Clearance");
            id(LD1115H_Clearence_Status) = true;
          }
        }
number:
  - platform: template
    name: ${upper_devicename} LD1115H TH1 #TH1 is Movement/Motion Sensitivity
    id: LD1115H_TH1
    icon: "mdi:cogs"
    optimistic: true
    initial_value: "120" #Default TH1 Setting
    min_value: 20
    max_value: 1500
    step: 10
    set_action:
      then:
        - uart.write:
            id: LD1115H_UART_BUS
            data: !lambda |-
              std::string th1st = "th1=" + to_string(x) +" \n";
              return std::vector<uint8_t>(th1st.begin(), th1st.end());
  - platform: template
    name: ${upper_devicename} LD1115H TH2 #TH2 is Occupancy/Presence Sensitivity
    id: LD1115H_TH2
    icon: "mdi:cogs"
    optimistic: true
    initial_value: "250" #Default TH2 Setting
    min_value: 50
    max_value: 4000
    step: 50
    set_action:
      then:
        - uart.write:
            id: LD1115H_UART_BUS
            data: !lambda |-
              std::string th2st = "th2=" + to_string(x) +" \n";
              return std::vector<uint8_t>(th2st.begin(), th2st.end());
sensor:
  - platform: template
    name: ${upper_devicename} LD1115H Direction
    id: LD1115H_Direction
    icon: "mdi:signal-distance-variant"
    unit_of_measurement: ""
    accuracy_decimals: 0
    update_interval: 0.1s
  - platform: template
    name: ${upper_devicename} LD1115H Signal Strength
    id: LD1115H_Signal
    icon: "mdi:radar"
    unit_of_measurement: ""
    accuracy_decimals: 0
#    filters:    # Use Fliter To Debounce
#    - sliding_window_moving_average:
#        window_size: 5
#        send_every: 1
text_sensor:
  - platform: serial
    uart_id: LD1115H_UART_BUS
    name: ${upper_devicename} LD1115H UART Text
    id: LD1115H_UART_Text
    icon: "mdi:format-text"
    internal: False #If Don't Want to See UART Receive Data, Set To True
    on_value:
      lambda: |-
        if (id(LD1115H_UART_Text).state.substr(0,3) == "occ") {
          id(LD1115H_Signal).publish_state(atof(id(LD1115H_UART_Text).state.substr(7).c_str()));
          id(LD1115H_Direction).publish_state(atof(id(LD1115H_UART_Text).state.substr(5,2).c_str()));
          id(LD1115H_Occupancy).publish_state("Occupancy");
          id(LD1115H_Last_Time) = time(NULL);
          if (id(LD1115H_Clearence_Status) == true) {
            id(LD1115H_Clearence_Status) = false;
          }
        }
        else if (id(LD1115H_UART_Text).state.substr(0,3) == "mov") {
          id(LD1115H_Signal).publish_state(atof(id(LD1115H_UART_Text).state.substr(7).c_str()));
          id(LD1115H_Direction).publish_state(atof(id(LD1115H_UART_Text).state.substr(5,2).c_str()));
          id(LD1115H_Occupancy).publish_state("Movement");
          id(LD1115H_Last_Time) = time(NULL);
          if (id(LD1115H_Clearence_Status) == true) {
            id(LD1115H_Clearence_Status) = false;
          }
        }
  - platform: template
    name: ${upper_devicename} LD1115H Occupancy Status
    id: LD1115H_Occupancy
    icon: "mdi:radar"
