esphome:
  name: esp32-test
external_components:
  - source:
      type: git
      url: https://github.com/ssieb/custom_components
    components: [ serial ]
esp32:
  board: esp32dev
  framework:
    type: arduino
globals:
  - id: LD1115H_Occ_Time
    type: int
    restore_value: no
    initial_value: '5' #Set LD1115H Clearance Time Here
  - id: LD1115H_Last_Time
    type: time_t
    restore_value: no
    initial_value: time(NULL)
logger:
  level: DEBUG
  #baud_rate: 0
api:
ota:
  password: "1c2b59f17342fcc0bfc95c597a85efc8"
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
improv_serial:
esp32_improv:
  authorizer: none
uart:
  id: LD1115H_UART_BUS
  rx_pin: GPIO16
  tx_pin: GPIO17
  baud_rate: 115200
  stop_bits: 1
  setup_priority: 200
  #debug:
light:
  - platform: status_led
    name: "ESP32-TEST LED"
    pin: GPIO2
    icon: "mdi:led-on"
web_server:
  port: 80
interval:
  - interval: 1s
    setup_priority: -200
    then:
      lambda: |-
        if ((time(NULL)-id(LD1115H_Last_Time))>id(LD1115H_Occ_Time)) {
          id(LD1115H_Occupancy).publish_state("Clearance");
        }
select:
  - platform: template
    name: "LD1115H-TH1"
    optimistic: true
    id: LD1115H_TH1
    icon: "mdi:radar"
    setup_priority: 100
    options:
      - "40"
      - "80"
      - "120"
      - "180"
      - "240"
      - "300"
      - "400"
      - "500"
      - "600"
      - "800"
    initial_option: "120" #Default Th1 Setting
    on_value:
      then:
        - uart.write:
            id: LD1115H_UART_BUS
            data: !lambda |-
              std::string th1str = "th1=" + x;
              std::vector<uint8_t> th1(th1str.begin(), th1str.end());
              return {th1};
  - platform: template
    name: "LD1115H-TH2"
    id: LD1115H_TH2
    icon: "mdi:radar"
    setup_priority: 100
    optimistic: true
    options:
      - "100"
      - "150"
      - "200"
      - "250"
      - "300"
      - "350"
      - "400"
      - "450"
      - "500"
      - "600"
      - "700"
      - "800"
      - "1000"
    initial_option: "250" #Default Th2 Setting
    on_value:
      then:
        - uart.write:
            id: LD1115H_UART_BUS
            data: !lambda |-
              std::string th2str = "th2=" + x;
              std::vector<uint8_t> th2(th2str.begin(), th2str.end());
              return {th2};
sensor:
  - platform: wifi_signal
    name: "ESP32-TEST WiFi Signal Sensor"
    update_interval: 60s
  - platform: template
    name: "LD1115H Direction"
    id: LD1115H_Direction
    icon: "mdi:radar"
    unit_of_measurement: ""
    accuracy_decimals: 0
    update_interval: 0.1s
  - platform: template
    name: "LD1115H Signal Strength"
    id: LD1115H_Signal
    icon: "mdi:signal-distance-variant"
    unit_of_measurement: ""
    accuracy_decimals: 0
#    filters:    # Use Fliter To Debounce
#    - sliding_window_moving_average:
#        window_size: 5
#        send_every: 1
text_sensor:
  - platform: wifi_info
    ip_address:
      name: ESP32-TEST IP
  - platform: serial
    uart_id: LD1115H_UART_BUS
    name: LD1115H UART Text
    id: LD1115H_UART_Text
    icon: "mdi:format-text"
    internal: False #If Don't Want to See UART Receive Data, Set To True
    on_value:
      lambda: |-
        if (id(LD1115H_UART_Text).state.substr(0,3) == "occ") {
          id(LD1115H_Signal).publish_state(atof(id(LD1115H_UART_Text).state.substr(7).c_str()));
          id(LD1115H_Direction).publish_state(atof(id(LD1115H_UART_Text).state.substr(5,2).c_str()));
          id(LD1115H_Occupancy).publish_state("Occupied");
          id(LD1115H_Last_Time) = time(NULL);
        }
        else if (id(LD1115H_UART_Text).state.substr(0,3) == "mov") {
          id(LD1115H_Signal).publish_state(atof(id(LD1115H_UART_Text).state.substr(7).c_str()));
          id(LD1115H_Direction).publish_state(atof(id(LD1115H_UART_Text).state.substr(5,2).c_str()));
          id(LD1115H_Occupancy).publish_state("Movement");
          id(LD1115H_Last_Time) = time(NULL);
        }
        else {
          id(LD1115H_Occupancy).publish_state("UART Receive Error");
        }
  - platform: template
    name: "LD1115H Occupancy Status"
    id: LD1115H_Occupancy
    icon: "mdi:radar"
